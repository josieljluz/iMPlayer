name: DeepSeek

on:
  schedule:
    - cron: '0 3,9,15,21 * * *'  # Executa às 00:00, 06:00, 12:00 e 18:00 BRT
  workflow_dispatch:  # Permite execução manual

jobs:
  download:
    runs-on: ubuntu-latest

    steps:
    # Passo 1: Checkout do repositório
    - name: Checkout do repositório
      uses: actions/checkout@v4

    # Passo 2: Configurar Python
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    # Passo 3: Cache de dependências do pip
    - name: Cache de dependências do pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Passo 4: Instalar dependências
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # Passo 5: Executar script de download
    - name: Executar script de DeepSeek
      run: python DeepSeek.py
      env:
        DIRETORIO_SAIDA: "iMPlayer"  # Define o diretório de saída como variável de ambiente

    # Passo 6: Atualizar timestamp nos arquivos baixados
    - name: Atualizar timestamp nos arquivos baixados
      run: |
        for arquivo in iMPlayer/*; do
          echo "# Atualizado em $(date)" >> "$arquivo"
        done

    # Passo 7: Validar arquivos baixados
    - name: Validar arquivos baixados
      run: |
        if [ -z "$(ls -A iMPlayer)" ]; then
          echo "Erro: Nenhum arquivo foi baixado."
          exit 1
        else
          echo "Arquivos baixados com sucesso:"
          ls -la iMPlayer
        fi

    # Passo 8: Verificar mudanças no Git
    - name: Verificar mudanças no Git
      id: git_status
      run: |
        if [[ -n "$(git status --porcelain)" ]]; then
          echo "changes=true" >> $GITHUB_ENV
        else
          echo "changes=false" >> $GITHUB_ENV
        fi

    # Passo 9: Commit e push das mudanças (se houver)
    - name: Commit e push das mudanças
      if: env.changes == 'true'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add iMPlayer/
        git commit -m "Atualização automática dos arquivos baixados em $(date +'%Y-%m-%d %H:%M:%S')"
        git fetch origin main
        git reset --hard origin/main  # Força a sobrescrita do branch local com o remoto
        git merge --strategy-option theirs --allow-unrelated-histories -m "Mesclando alterações"  # Resolve conflitos usando a versão local
        git push https://x-access-token:${{ secrets.MY_DOWNLOAD_GITHUB_TOKEN }}@github.com/josieljluz/iMPlayer.git main

    # Passo 10: Notificar sucesso
    - name: Notificar sucesso
      if: success()
      run: |
        echo "Workflow executado com sucesso!"

    # Passo 11: Notificar falha
    - name: Notificar falha
      if: failure()
      run: |
        echo "Workflow falhou!"
        exit 1